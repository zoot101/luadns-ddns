#!/bin/sh -e

###################################
# Debian Maintainer Postinst Script
###################################
# COPYRIGHT (C) Mark Finnan 2025
###################################
# Generates a drop-in file in the following to run the service
# as a different user than root by default
# /etc/systemd/system/${package_name}.service.d/user.conf
#
# Also ensures the permissions are updated on an additional working
# directory. Usually - /var/lib/${package_name} if being used
###################################

# Source debconf library.
. /usr/share/debconf/confmodule
db_version 2.0

# Script Variables
package_name="luadns-ddns"
dropin_dir="/etc/systemd/system/${package_name}.service.d"
dropin_file="${dropin_dir}/user.conf"
working_dir="/var/lib/${package_name}"

# Action
action="$1"

###################################
# Main Function
###################################
main() {
  # Check for Configure Argument (single = only...)
  if [ "$action" = "configure" ]
  then
    # Print Banner
    print_banner "$@"

    # Now call debconf and get the value of the systemd_user
    # and systemd_group that the user was prompted for.
    get_group_and_user

    # Generate Drop-In File
    generate_dropin_file

    # Exit with Success
    exit 0

  # Otherwise exit cleanly for all other arguments
  else
    exit 0
  fi
}

###################################
# Other Functions
###################################
# Print Banner
print_banner() {
  echo "###########################"
  if [ -z "$2" ]; then
    echo "# Luadns-DDNS"
  else
    echo "# Luadns-DDNS Version:" "$2"
  fi
  echo "###########################"
}

###################################
# Get Group and User
###################################
get_group_and_user() {

  # Get the User Name
  db_get luadns-ddns/systemd_user || true
  systemd_user="$RET"

  # Get the Group Name
  db_get luadns-ddns/systemd_group || true
  systemd_group="$RET"
}

###################################
# Generate the Drop-In File
###################################
generate_dropin_file() {

  # Check if the user is blank, if this is the case,
  # use root
  if [ -z "$systemd_user" ]
  then
    systemd_user="root"
    systemd_group="root"
  fi

  # Check if the group is empty, if it is,
  # default to the default group for the user
  if [ -z "$systemd_group" ]
  then
    systemd_group=$(groups "$systemd_user" | awk '{print $3}')
  fi

  # Print Out the Service User/Group
  echo "Service User: $systemd_user"
  echo "Service Group: $systemd_group"
  echo "To change run $ dpkg-reconfigure ${package_name}"

  # If the dropin directory doesn't exist - create it
  if [ ! -d "$dropin_dir" ]
  then
    mkdir "$dropin_dir"
  fi

  # Now Check if the drop-in file exists
  if [ -f "$dropin_file" ]
  then
    # Get the Group and User from the Drop-In file
    existing_user="$(grep "^User=" "$dropin_file" | sed 's/User=//;s/ *$//')"
    existing_group="$(grep "^Group=" "$dropin_file" | sed 's/Group=//;s/ *$//')"

    # Check if the User and the Group are different, if so
    # Re-Generate the drop-in file and reload systemd
    if [ "$existing_user" != "$systemd_user" ] || [ "$existing_group" != "$systemd_group" ]
    then
      # Write the Drop-In File
      write_dropin_file

      # Reload systemd
      echo "Reloading systemd..."
      systemctl daemon-reload

      # Update Working Directory Permissions
      update_working_dir_permissions
    else
      echo "Not regenerating ${dropin_file}..."
    fi
  else
    # Write the Drop-In File
    write_dropin_file

    # Reload systemd
    echo "Reloading systemd..."
    systemctl daemon-reload

    # Update Working Directory Permissions
    update_working_dir_permissions
  fi  
}

###################################
# Write the Drop-In File
###################################
write_dropin_file() {
  echo "Generating ${dropin_file}..."
  echo "[Service]" > "$dropin_file"
  echo "User=${systemd_user}" >> "$dropin_file"
  echo "Group=${systemd_group}" >> "$dropin_file"
}

###################################
# Update Working Directory Permissions
###################################
update_working_dir_permissions() {
  echo "Updating permissions on ${working_dir}..."
  chown "$systemd_user":"$systemd_group" "$working_dir" || \
  echo "Invalid User/Group Given - please run $ dpkg-reconfigure ${package_name} again"
}

###################################
# Call Main Function
###################################
main "$@"

