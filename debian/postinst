#!/bin/sh

set -e

# Source debconf library.
. /usr/share/debconf/confmodule
db_version 2.0

action="$1"
version="$2"

package_name="luadns-ddns"
dropin_dir="/etc/systemd/system/${package_name}.service.d"
dropin_file="${dropin_dir}/user.conf"
working_dir="/var/lib/${package_name}"

main () {
  if [ "$action" = "configure" ] || [ "$action" = "reconfigure" ]
  then
    # Generate the Drop-In File to Run the Script as a different user
    get_group_and_user
    new_dropin_file="no"
    generate_dropin_file
  fi

  # Update the permissions on the working directory if
  # a new drop-in file was generated
  if [ "$new_dropin_file" = "yes" ]
  then
    chown "$systemd_user":"$systemd_group" "$working_dir" || true
  fi

  # Reload Systemd (Always done for a new install)
  if [ -z "$version" ] || [ "$new_dropin_file" != "no" ]
  then
   if [ -d "/run/systemd/system" ]
   then
     systemctl --system daemon-reload >/dev/null || true
   fi
  fi

  #DEBHELPER#

  exit 0
}


# Get Group and User from debconf
get_group_and_user() {
  db_get luadns-ddns/systemd_user || true
  systemd_user="$RET"
  db_get luadns-ddns/systemd_group || true
  systemd_group="$RET"
}

# Write the Drop-In File
write_dropin_file() {
cat <<EOF > "$dropin_file"
# Autogenerated during installation - recommended not to edit!
# To Change User or Group Below, issue the following command instead
# $ dpkg-reconfigure ${package_name}
#
# To tweak any other settings, create a different .conf file drop-in file
# in this directory
#
[Service]
User=${systemd_user}
Group=${systemd_group}
EOF
}

# Generate the Drop-In File
generate_dropin_file() {
  # Check if the user is blank, if so - use root
  if [ -z "$systemd_user" ]; then
    systemd_user="root"
    systemd_group="root"
  fi

  # If the user input doesn't exist, default the group to the same value
  # Best to leave service fail so the user knows about the problem...
  if ! id "$systemd_user" >/dev/null; then
    systemd_group="$systemd_user"
  fi

  # Check if the group is empty, if it is, default to the default group
  if [ -z "$systemd_group" ]; then
    systemd_group=$(groups "$systemd_user" | awk '{print $3}')
  fi

  # Now Check if the drop-in file exists
  if [ -f "$dropin_file" ]; then
    # Get the Group and User from the Drop-In file
    existing_user="$(grep "^User=" "$dropin_file" | sed 's/User=//;s/ *$//')"
    existing_group="$(grep "^Group=" "$dropin_file" | sed 's/Group=//;s/ *$//')"

    # Check if the existing user or group are empty or if there's been a change
    if [ -z "$existing_user" ] || [ -z "$existing_group" ]; then
      write_dropin_file
      new_dropin_file="yes"
    elif [ "$existing_user" != "$systemd_user" ] || [ "$existing_group" != "$systemd_group" ]; then
      write_dropin_file
      new_dropin_file="yes"
    fi
  else
    write_dropin_file
    new_dropin_file="yes"
  fi  
}

# Call The Main Function 
main "$@"

